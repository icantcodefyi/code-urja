generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          Role       @default(CANDIDATE)
    candidate     Candidate? // For candidate users
    hrProfile     HRProfile? // For HR users
    createdAssessments Assessment[] @relation("CreatedAssessments") // Assessments created by HR
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// New Models for the Resume Platform
enum Role {
    CANDIDATE
    HR
    ADMIN
}

model Candidate {
    id             String             @id @default(cuid())
    userId         String             @unique
    user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    resumeUrl      String? // URL to stored resume file
    createdAt      DateTime           @default(now())
    updatedAt      DateTime           @updatedAt
    submissions    AssessmentSubmission[]
    videoResponses VideoResponse[]
    audioResponses AudioResponse[]
    textResponses  TextResponse[]
    analysis       CandidateAnalysis?
}

model HRProfile {
    id          String   @id @default(cuid())
    userId      String   @unique
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    companyName String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Assessment {
    id          String           @id @default(cuid())
    title       String
    description String?
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    questions   Question[]
    createdBy   String          // HR user ID who created the assessment
    hrUser      User            @relation("CreatedAssessments", fields: [createdBy], references: [id])
    uniqueLink  String          @unique // Unique link for assessment access
    isTemplate  Boolean         @default(false) // Whether this is a template assessment
    templateName String?        // Name of the template if isTemplate is true
    maxDuration Int?            // Maximum duration in minutes for the assessment
    passingScore Float?         // Minimum score required to pass
    aiAnalysisEnabled Boolean   @default(true) // Whether AI analysis is enabled for this assessment
    submissions AssessmentSubmission[]  // Link to assessment submissions from candidates
}

enum AssessmentStatus {
    PENDING
    IN_PROGRESS
    COMPLETED
    REVIEWED
}

model Question {
    id            String         @id @default(cuid())
    assessmentId  String
    assessment    Assessment     @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
    text          String
    type          QuestionType
    order         Int
    videoResponses VideoResponse[]
    audioResponses AudioResponse[]
    textResponses  TextResponse[]
}

enum QuestionType {
    VIDEO
    AUDIO
    TEXT
}

model VideoResponse {
    id                  String               @id @default(cuid())
    candidateId         String
    candidate           Candidate            @relation(fields: [candidateId], references: [id], onDelete: Cascade)
    questionId          String    
    question            Question             @relation(fields: [questionId], references: [id], onDelete: Cascade)
    submissionId        String
    submission          AssessmentSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
    videoUrl            String // URL to stored video file
    transcription       String? // AI-generated transcription
    duration            Int // Duration in seconds
    createdAt           DateTime             @default(now())
    
    @@unique([questionId, submissionId])
}

model AudioResponse {
    id                  String               @id @default(cuid())
    candidateId         String
    candidate           Candidate            @relation(fields: [candidateId], references: [id], onDelete: Cascade)
    questionId          String    
    question            Question             @relation(fields: [questionId], references: [id], onDelete: Cascade)
    submissionId        String
    submission          AssessmentSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
    audioUrl            String // URL to stored audio file
    transcription       String? // AI-generated transcription
    duration            Int // Duration in seconds
    createdAt           DateTime             @default(now())
    
    @@unique([questionId, submissionId])
}

model TextResponse {
    id                  String               @id @default(cuid())
    candidateId         String
    candidate           Candidate            @relation(fields: [candidateId], references: [id], onDelete: Cascade)
    questionId          String    
    question            Question             @relation(fields: [questionId], references: [id], onDelete: Cascade)
    submissionId        String
    submission          AssessmentSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
    content             String // Text content of the response
    createdAt           DateTime             @default(now())
    
    @@unique([questionId, submissionId])
}

model CandidateAnalysis {
    id              String    @id @default(cuid())
    candidateId     String    @unique
    candidate       Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
    overallScore    Float // Score out of 100
    intentToJoin    Float // Percentage
    skillScore      Float // Percentage
    experienceScore Float // Percentage
    strengths       String[] // Array of strengths
    analysisJson    Json? // Detailed analysis data
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
}

// New model to track individual submissions
model AssessmentSubmission {
    id            String           @id @default(cuid())
    assessmentId  String
    assessment    Assessment       @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
    candidateId   String
    candidate     Candidate        @relation(fields: [candidateId], references: [id], onDelete: Cascade)
    status        AssessmentStatus @default(PENDING)
    startedAt     DateTime         @default(now())
    completedAt   DateTime?
    videoResponses VideoResponse[]
    audioResponses AudioResponse[]
    textResponses  TextResponse[]
    
    @@unique([assessmentId, candidateId])
    @@map("assessment_submission") // Add explicit table name for Prisma
}
